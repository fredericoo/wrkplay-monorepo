// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RecordStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum UserRole {
  GUEST
  USER
  ADMIN
  REMOVED
}

enum Currency {
  GBP
}

model User {
  id        String   @id @default(dbgenerated("nanoid(12)")) @db.VarChar(12)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  name        String
  role        UserRole          @default(GUEST)
  permissions VenuePermission[]

  sideAMatches Match[] @relation("SideA")
  sideBMatches Match[] @relation("SideB")
}

enum Permission {
  VIEW
  EDIT
}

model VenuePermission {
  id        String   @id @default(dbgenerated("uuid7()")) @db.VarChar(36)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user  User  @relation(fields: [userId], references: [id])
  venue Venue @relation(fields: [venueId], references: [id])

  role    Permission @default(VIEW)
  venueId String
  userId  String
}

model Venue {
  id        String       @id @default(dbgenerated("nanoid(6)")) @db.VarChar(6)
  status    RecordStatus @default(DRAFT)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(now()) @updatedAt

  permissions VenuePermission[]
  name        String

  pitches Pitch[]
}

model Pitch {
  id        String   @id @default(dbgenerated("nanoid(6)")) @db.VarChar(6)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  minTeamSize Int @default(1)
  maxTeamSize Int @default(1)

  venueId String
  venue   Venue  @relation(fields: [venueId], references: [id])

  name    String
  matches Match[]
}

enum MatchStatus {
  // Can can only modify sideA and sideB
  NOT_STARTED
  // Can only modify sideAScore and sideBScore
  STARTED
  // Can no longer modify
  FINISHED
}

model Match {
  id        String   @id @default(dbgenerated("uuid7()")) @db.VarChar(36)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  status MatchStatus @default(NOT_STARTED)

  pitchId String
  pitch   Pitch  @relation(fields: [pitchId], references: [id])

  sideA User[] @relation("SideA")
  sideB User[] @relation("SideB")

  sideAScore Int @default(0)
  sideBScore Int @default(0)
}
